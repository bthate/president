#!/usr/bin/env python3
# PRESIDENT (bin/president)
#
# this file is placed in the public domain

import os, sys ; sys.path.insert(0, os.getcwd())

import atexit
import op
import os
import readline
import signal
import sys
import threading
import time

from op.hdl import Command, Handler, cmd
from op.prs import parse_cli
from op.sel import Select
from op.thr import launch
from op.trm import console, termreset
from op.utl import privileges

# defines

wd = os.path.abspath(os.path.expanduser("~/.president"))

# classes

class Console(Handler):

    "console class"

    def __init__(self):
        super().__init__()
        self.register("cmd", cmd)

    def announce(self, txt):
        "silence announcing"

    def direct(self, txt):
        print(txt)

    def input(self):
        "loop for input"
        while 1:
            try:
                e = self.poll()
            except EOFError:
                break
            if not e:
                time.sleep(0.01)
                continue
            self.put(e)
            e.wait()

    def poll(self):
        "wait for input"
        return Command(input("> "))

    def say(self, channel, txt):
        "strip channel from output"
        self.direct(txt)

    def start(self):
        "start console"
        super().start()
        launch(self.input)

class Mini(Handler):

    "just output to terminal"

    def direct(self, txt):
        print(txt)

class SelectConsole(Select):

    "print to stdout from select"

    def __init__(self):
        super().__init__()
        self.register_fd(sys.stdin)
        self.register("cmd", cmd)

    def poll(self):
        "wait for input"
        return Command(input("> "))

    def direct(self, txt):
        print(txt)

# functions

def daemon():
    "fork to child proces"
    pid = os.fork()
    if pid != 0:
        termreset()
        os._exit(0)
    os.setsid()
    os.umask(0)
    si = open("/dev/null", 'r')
    so = open("/dev/null", 'a+')
    se = open("/dev/null", 'a+')
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

def opcheck(ops, cfg):
    for o in ops:
        if o in cfg.opts:
             return True    
    return False

def sighup(frame, bla):
    print("sighup")

def main():
    "main function"
    signal.signal(signal.SIGHUP, sighup)
    cfg = parse_cli(wd)
    if opcheck("h", cfg):
        return print(__doc__)
    h = Mini()
    h.load("op.cmd")
    h.walk("president")
    if cfg.txt or opcheck("n", cfg):
        return h.cmd(cfg.otxt)
    if opcheck("d", cfg):
        daemon()
    h.start()
    for thr in h.init(cfg.sets.mods):
        thr.join()
    if opcheck("s", cfg):
        c = SelectConsole()
        c.clone(h)
        c.start()
        c.wait()
    elif opcheck("sdw", cfg) or cfg.sets.mods:
        h.wait()

# runtime

cmds = []
starttime = time.time()
console(main)
os._exit(0)
